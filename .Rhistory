# Packages Staging --------------------------------------------------------
require(ggplot2) #for graphs
require(data.table) #for mangling data
require(tidyr) #for reshaping data
require(haven) #for reading Stata data
require(xts) #handling time series data
require(quantmod) #quant modeling
require(magrittr) #pipe operator
require(lubridate) #working with dates
require(ggthemes)
install.packages("ggplot2")
install.packages("data.table")
install.packages("lubridate")
install.packages("haven")
install.packages("xts")
install.packages("quantmod")
install.packages("magrittr")
install.packages("ggthemes")
# Data Cleaning -----------------------------------------------------------
setwd("~/Dropbox/Projects/PractionerPaper")
data <- read_dta("data/momentum.dta")
data <- data.table(data,keep.rownames = TRUE)
#delete unused column "rn i.e row number"
data[,c("rn") := NULL]
#create a column of "date" type
data[,c("date") := list(as.Date(as.character(caldt),"%Y%m%d"))]
#for each fund, order it's data by the date
data <- data[order(nasdaq,date)]
#change data type for daily return and daily nav
data[,ret := as.numeric(dret)]
#NA occurs
data[is.na(ret)]
#delete rows with NAs: these NAs mark the initiation dates
data <- data[!(is.na(ret))]
#create a column for cumulative return for each nasdaq ticker
data[,c("cumret") := list(cumprod(1+ret)), by = nasdaq]
# data[,.N,by = nasdaq]
# data[,.N,by = crsp_fundno]
ticker <- data[,unique(nasdaq)]
# Packages Staging --------------------------------------------------------
require(ggplot2) #for graphs
require(data.table) #for mangling data
require(tidyr) #for reshaping data
require(haven) #for reading Stata data
require(xts) #handling time series data
require(quantmod) #quant modeling
require(magrittr) #pipe operator
require(lubridate) #working with dates
require(ggthemes)
# Data Cleaning -----------------------------------------------------------
setwd("~/Dropbox/Projects/PractionerPaper")
data <- read_dta("data/momentum.dta")
data <- data.table(data,keep.rownames = TRUE)
#delete unused column "rn i.e row number"
data[,c("rn") := NULL]
#create a column of "date" type
data[,c("date") := list(as.Date(as.character(caldt),"%Y%m%d"))]
#for each fund, order it's data by the date
data <- data[order(nasdaq,date)]
#change data type for daily return and daily nav
data[,ret := as.numeric(dret)]
#NA occurs
data[is.na(ret)]
#delete rows with NAs: these NAs mark the initiation dates
data <- data[!(is.na(ret))]
#create a column for cumulative return for each nasdaq ticker
data[,c("cumret") := list(cumprod(1+ret)), by = nasdaq]
# data[,.N,by = nasdaq]
# data[,.N,by = crsp_fundno]
ticker <- data[,unique(nasdaq)]
data
ticker
t(ticker)
print(ticker)
data
###Momentum Trading Detector
require(quantmod)
require(xts)
require(data.table)
require(lubridate)
require(PerformanceAnalytics)
require(magrittr)
setwd("/Users/renco/GitHub/Renco_Quant_Trading")
start_date <- today() - 30 - 1
end_date <- today() - 1
###Momentum Trading Detector
require(quantmod)
require(xts)
require(data.table)
require(lubridate)
require(PerformanceAnalytics)
require(magrittr)
setwd("/Users/renco/GitHub/Renco_Quant_Trading")
start_date <- today() - 30
end_date <- today()
start_date
# Should we trade? --------------------------------------------------------
#Is market in distress?
getSymbols("000001.SS", from = start_date,
to = end_date)
sh <- dailyReturn(get("000001.SS"))
sh <- data.table(coredata(sh), index(sh))
names(sh) <- c("d.ret", "date")
sh <- sh[d.ret !=  0 ]
sh.ret <- prod(1 + head(tail(sh$d.ret,8),7))
if (sh.ret < 1) {
print("No Trading ")
}else{
print("Good to go")
}
print(tail(index(get("000001.SS")),1))
print(sh.ret)
# Momentum Strat ----------------------------------------------------------
stock_list <- load("All_list.RData")
stocks_code <- as.vector(as.matrix(get(stock_list))) #for looping to saving time
mom.df <- data.frame(matrix(rep(NA, 2 * length(stocks_code)), ncol = 2))
names(mom.df) <- c("symbol","cum.ret")
code_count <- 0
for (code in stocks_code) {
code_count <- code_count + 1
symbol <- "" ##Initiate
symbol <- paste(sprintf("%06d", code),
ifelse(code <= 600000, "SZ","SS"),
sep = ".") #SZ stocks has number smaller than 1000
#getSymbols(symbol,from=start_date) #Fecthing data
tryCatch({getSymbols(symbol,from = start_date,to = end_date)
#atr <- lag(ATR(get(symbol)))
#ajusted for split and dividends
#get(symbol) <- adjustOHLC(get(symbol),use.Adjusted=TRUE)
ret.ts <- dailyReturn(get(symbol))
ret.ts <- data.table(coredata(ret.ts),index(ret.ts))
names(ret.ts) <- c("d.ret","date")
ret.ts <- ret.ts[d.ret != 0] #take out daily not trading
if (dim(ret.ts)[1] < 7) {
removeSymbols(symbol) #house keeping
next
}
# if ( tail(index(get(symbol)),1) != end_date) {
# removeSymbols(symbol) #house keeping
# next
#}
#last 7 days skippping the most recent day
temp.cum.ret <- prod(1 + head(tail(ret.ts$d.ret,8),7))
mom.df[code_count,"symbol"] <- symbol
mom.df[code_count,"cum.ret"] <- temp.cum.ret
removeSymbols(symbol)  #house keeping
},
warning = function(msg) {
print(paste("Caught warning message:", msg))
},
error = function(msg) {
print(paste("Caught fatal message:", msg))
return(NA)
}
) #tryCatch
} #for
mom.dt <- data.table(mom.df)
mom.dt <- mom.dt[order(-cum.ret)]
mom.dt <- mom.dt[is.na(cum.ret) == FALSE]
cat("Top 20 Winners:\n\n")
print(head(mom.dt,20))
port <- head(mom.dt, 20)
ls()
rm(list = ls())
ls()
###Momentum Trading Detector
require(quantmod)
require(xts)
require(data.table)
require(lubridate)
require(PerformanceAnalytics)
require(magrittr)
setwd("/Users/renco/GitHub/Renco_Quant_Trading")
start_date <- today() - 30
end_date <- today()
##test github desktop
# Should we trade? --------------------------------------------------------
#Is market in distress?
getSymbols("000001.SS", from = start_date,
to = end_date)
sh <- dailyReturn(get("000001.SS"))
sh <- data.table(coredata(sh), index(sh))
names(sh) <- c("d.ret", "date")
sh <- sh[d.ret !=  0 ]
sh.ret <- prod(1 + head(tail(sh$d.ret,8),7))
if (sh.ret < 1) {
print("No Trading ")
}else{
print("Good to go")
}
print(tail(index(get("000001.SS")),1))
print(sh.ret)
# Momentum Strat ----------------------------------------------------------
stock_list <- load("All_list.RData")
stocks_code <- as.vector(as.matrix(get(stock_list))) #for looping to saving time
mom.df <- data.frame(matrix(rep(NA, 2 * length(stocks_code)), ncol = 2))
names(mom.df) <- c("symbol","cum.ret")
code_count <- 0
for (code in stocks_code) {
code_count <- code_count + 1
symbol <- "" ##Initiate
symbol <- paste(sprintf("%06d", code),
ifelse(code <= 600000, "SZ","SS"),
sep = ".") #SZ stocks has number smaller than 1000
#getSymbols(symbol,from=start_date) #Fecthing data
tryCatch({getSymbols(symbol,from = start_date,to = end_date)
#atr <- lag(ATR(get(symbol)))
#ajusted for split and dividends
#get(symbol) <- adjustOHLC(get(symbol),use.Adjusted=TRUE)
ret.ts <- dailyReturn(get(symbol))
ret.ts <- data.table(coredata(ret.ts),index(ret.ts))
names(ret.ts) <- c("d.ret","date")
ret.ts <- ret.ts[d.ret != 0] #take out daily not trading
if (dim(ret.ts)[1] < 7) {
removeSymbols(symbol) #house keeping
next
}
# if ( tail(index(get(symbol)),1) != end_date) {
# removeSymbols(symbol) #house keeping
# next
#}
#last 7 days skippping the most recent day
temp.cum.ret <- prod(1 + head(tail(ret.ts$d.ret,8),7))
mom.df[code_count,"symbol"] <- symbol
mom.df[code_count,"cum.ret"] <- temp.cum.ret
removeSymbols(symbol)  #house keeping
},
warning = function(msg) {
print(paste("Caught warning message:", msg))
},
error = function(msg) {
print(paste("Caught fatal message:", msg))
return(NA)
}
) #tryCatch
} #for
mom.dt <- data.table(mom.df)
mom.dt <- mom.dt[order(-cum.ret)]
mom.dt <- mom.dt[is.na(cum.ret) == FALSE]
cat("Top 20 Winners:\n\n")
print(head(mom.dt,20))
port <- head(mom.dt, 20)
rm(lis=ls())
rm(list=ls())
#Is market in distress?
getSymbols("000001.SS", from = start_date,
to = end_date)
sh <- dailyReturn(get("000001.SS"))
sh <- data.table(coredata(sh), index(sh))
names(sh) <- c("d.ret", "date")
sh <- sh[d.ret !=  0 ]
sh.ret <- prod(1 + head(tail(sh$d.ret,8),7))
if (sh.ret < 1) {
print("No Trading ")
}else{
print("Good to go")
}
print(tail(index(get("000001.SS")),1))
print(sh.ret)
setwd("/Users/renco/GitHub/Renco_Quant_Trading")
start_date <- today() - 30
end_date <- today()
#Is market in distress?
getSymbols("000001.SS", from = start_date,
to = end_date)
sh <- dailyReturn(get("000001.SS"))
sh <- data.table(coredata(sh), index(sh))
names(sh) <- c("d.ret", "date")
sh <- sh[d.ret !=  0 ]
sh.ret <- prod(1 + head(tail(sh$d.ret,8),7))
if (sh.ret < 1) {
print("No Trading ")
}else{
print("Good to go")
}
print(tail(index(get("000001.SS")),1))
print(sh.ret)
setwd("/Users/renco/GitHub/Renco_Quant_Trading")
start_date <- today() - 30
end_date <- today()
# Should we trade? --------------------------------------------------------
#Is market in distress?
getSymbols("000001.SS", from = start_date,
to = end_date)
sh <- dailyReturn(get("000001.SS"))
sh <- data.table(coredata(sh), index(sh))
names(sh) <- c("d.ret", "date")
sh <- sh[d.ret !=  0 ]
sh.ret <- prod(1 + head(tail(sh$d.ret,8),7))
if (sh.ret < 1) {
print("No Trading ")
}else{
print("Good to go")
}
print(tail(index(get("000001.SS")),1))
print(sh.ret)
# Momentum Strat ----------------------------------------------------------
stock_list <- load("All_list.RData")
stocks_code <- as.vector(as.matrix(get(stock_list))) #for looping to saving time
mom.df <- data.frame(matrix(rep(NA, 2 * length(stocks_code)), ncol = 2))
names(mom.df) <- c("symbol","cum.ret")
code_count <- 0
for (code in stocks_code) {
code_count <- code_count + 1
symbol <- "" ##Initiate
symbol <- paste(sprintf("%06d", code),
ifelse(code <= 600000, "SZ","SS"),
sep = ".") #SZ stocks has number smaller than 1000
#getSymbols(symbol,from=start_date) #Fecthing data
tryCatch({getSymbols(symbol,from = start_date,to = end_date)
#atr <- lag(ATR(get(symbol)))
#ajusted for split and dividends
#get(symbol) <- adjustOHLC(get(symbol),use.Adjusted=TRUE)
ret.ts <- dailyReturn(get(symbol))
ret.ts <- data.table(coredata(ret.ts),index(ret.ts))
names(ret.ts) <- c("d.ret","date")
ret.ts <- ret.ts[d.ret != 0] #take out daily not trading
if (dim(ret.ts)[1] < 7) {
removeSymbols(symbol) #house keeping
next
}
# if ( tail(index(get(symbol)),1) != end_date) {
# removeSymbols(symbol) #house keeping
# next
#}
#last 7 days skippping the most recent day
temp.cum.ret <- prod(1 + head(tail(ret.ts$d.ret,8),7))
mom.df[code_count,"symbol"] <- symbol
mom.df[code_count,"cum.ret"] <- temp.cum.ret
removeSymbols(symbol)  #house keeping
},
warning = function(msg) {
print(paste("Caught warning message:", msg))
},
error = function(msg) {
print(paste("Caught fatal message:", msg))
return(NA)
}
) #tryCatch
} #for
mom.dt <- data.table(mom.df)
mom.dt <- mom.dt[order(-cum.ret)]
mom.dt <- mom.dt[is.na(cum.ret) == FALSE]
cat("Top 20 Winners:\n\n")
print(head(mom.dt,20))
