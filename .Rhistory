pnorm(q=11, mean = 10, sd =5) -pnorm(q=9, mean = 10, sd =5)
x <- seq(0,20,by=0.01)
y <- dgamma(x,rate = l, shape = r)
z <- dnorm(x, mean = 10, sd =sqrt(5))
plot(x,y)
lines(x,z,col='blue')
pgamma(q=11,rate = l, shape = r) - pgamma(q=9,rate = l, shape = r)
pnorm(q=11, mean = 10, sd =5) -pnorm(q=9, mean = 10, sd =sqrt(5))
x <- seq(0,20,by=0.01)
y <- dgamma(x,rate = l, shape = r,lty=1)
z <- dnorm(x, mean = 10, sd =sqrt(5))
plot(x,y)
lines(x,z,col='blue')
x <- seq(0,20,by=0.01)
y <- dgamma(x,rate = l, shape = r)
z <- dnorm(x, mean = 10, sd =sqrt(5))
plot(x,y,lty=1)
lines(x,z,col='blue')
x <- seq(0,20,by=0.01)
y <- dgamma(x,rate = l, shape = r)
z <- dnorm(x, mean = 10, sd =sqrt(5))
plot(x,y,type='l')
lines(x,z,col='blue')
x <- seq(0,20,by=0.01)
y <- dgamma(x,rate = l, shape = r)
z <- dnorm(x, mean = 10, sd =sqrt(5))
plot(x,y,type='l',lty=2)
lines(x,z,col='blue')
pgamma(q=11,rate = l, shape = r) - pgamma(q=9,rate = l, shape = r)
pnorm(q=11, mean = 10, sd =5) -pnorm(q=9, mean = 10, sd =sqrt(5))
l = 2
r = 80
x <- seq(0,20,by=0.01)
y <- dgamma(x,rate = l, shape = r)
z <- dnorm(x, mean = 10, sd =sqrt(5))
plot(x,y,type='l',lty=2)
lines(x,z,col='blue')
pgamma(q=11,rate = l, shape = r) - pgamma(q=9,rate = l, shape = r)
pnorm(q=11, mean = 10, sd =5) -pnorm(q=9, mean = 10, sd =sqrt(5))
l = 2
r = 80
mean = r/l
sd = sqrt(r/(l^2))
x <- seq(0,20,by=0.01)
y <- dgamma(x,rate = l, shape = r)
z <- dnorm(x, mean , sd )
plot(x,y,type='l',lty=2)
lines(x,z,col='blue')
l = 2
r = 80
mean = r/l
sd = sqrt(r/(l^2))
x <- seq(0,200,by=0.01)
y <- dgamma(x,rate = l, shape = r)
z <- dnorm(x, mean , sd )
plot(x,y,type='l',lty=2)
lines(x,z,col='blue')
D = matrix(c(1,1,0,0,0,1,1,0,1,2,1,1,0,0,0,1),nrow=4)
D
D = matrix(c(1,1,0,0,0,1,1,0,1,2,1,1,0,0,0,1),nrow=4,byrow = TRUE)
D
rank(D)
rankMatrix(D)
require(matrix)
require(Matrix)
rankMatrix(D)
D
t(D)
D = matrix(c(1,1,0,0,0,1,1,0,1,2,1,1,0,0,0,1),nrow=4,byrow = TRUE)
b = c(4,9,5,5)
solve(a,b)
D = matrix(c(1,1,0,0,0,1,1,0,1,2,1,1,0,0,0,1),nrow=4,byrow = TRUE)
b = c(4,9,5,5)
solve(t(D),b)
mu = c(4,5,0,5)
t(D) %*% mu
ge = c(3,4,1,4)
t(D) %*% ge
t(D) %*% ge * 2
ge = c(-1,-1,1,-1)
t(D) %*% ge
t(D) %*% ge * 2
mu = c(4,5,0,3)
ge = c(-1,-1,1,-1)
t(D) %*% mu
mu = c(4,5,0,-1)
ge = c(-1,-1,1,-1)
t(D) %*% mu
DD = matrix(c(1,1,0,0,0,1,1,0,1,2,1,1,0,0,0,1,1,1,1,1),nrow=4,byrow = TRUE)
DD
DD = matrix(c(1,1,0,0,0,1,1,0,1,2,1,1,0,0,0,1,1,1,1,1),nrow=5,byrow = TRUE)
DD
DD = matrix(c(1,1,0,0,0,1,1,0,1,2,1,1,0,0,0,1,1,1,1,1),nrow=5,byrow = TRUE)
mumu = c(4,5,0,5)
t(DD) %*% mumu
t(DD) %&% mumu
t(DD)
DD
DD = matrix(c(1,1,0,0,1,0,1,1,0,1,1,2,1,1,1,0,0,0,1,1),nrow=5,byrow = TRUE)
DD
DD = matrix(c(1,1,0,0,1,0,1,1,0,1,1,2,1,1,1,0,0,0,1,1),nrow=4,byrow = TRUE)
DD
t(DD) %*% mumu
sigmau = 0.5
sigma0 = 0.4
t = seq(0,1,1000000)
lambda = sqrt(sigma0) / sigmau
Sigma = (1-t) * sigma
delta = sigmau / (2*sqrt(sigma0))
Sigma = (1-t) * sigma0
sigmau = 0.5
sigma0 = 0.4
t = seq(0,1,1000000)
lambda = sqrt(sigma0) / sigmau
Sigma = (1-t) * sigma0
delta = sigmau / (2*sqrt(sigma0))
require(ggplot2)
kyle <- data.frame(lambda,Sigma,delta)
sigmau = 0.5
sigma0 = 0.4
t = seq(0,1,1000000)
lambda = sqrt(sigma0) / sigmau
Sigma = (1-t) * sigma0
delta = sigmau / (2*sqrt(sigma0)) * (1-t)
require(ggplot2)
kyle <- data.frame(lambda,Sigma,delta)
kyle
t
sigmau = 0.5
sigma0 = 0.4
t = seq(0,1,1/1000000)
lambda = sqrt(sigma0) / sigmau
Sigma = (1-t) * sigma0
delta = sigmau / (2*sqrt(sigma0)) * (1-t)
require(ggplot2)
kyle <- data.frame(lambda,Sigma,delta)
kyle
head(kyle)
ggplot(kyle) + geom_line()
kyle <- data.frame(lambda,Sigma,delta,t)
ggplot(kyle) + geom_line(aes(x=t, y=c(lambda,Sigma,delta)))
ggplot(kyle) + geom_line(aes(x=t, y=lambda))
ggplot(kyle) + geom_line(aes(x=t, y=delta))
ggplot(kyle) + geom_line(aes(x=t, y=delta)) + geom_line(aes(x=t, y=Sigma))
source('~/.active-rstudio-document', echo=TRUE)
r
source('~/.active-rstudio-document', echo=TRUE)
rand = rnorm(r,sigma,252)
rand_stop = pmax(rand,-r)
r = 9 /252
sigma = 0.3/sqrt(252)
rand = rnorm(r,sigma,252)
rand_stop = pmax(rand,-r)
plot(rand_stop)
plot(1:252,rand_stop)
length(rand_stop)
plot(Rand)
plot(rand)
length(rand)
rand = rnorm(252,r,sigma)
rand_stop = pmax(rand,-r)
rand
rand_stop
plot(rand_stop)
plot(rand_stop,type='l')
-r
r = 9 /(252*100)
sigma = 0.3/sqrt(252)
times = 10000
rand = rnorm(252,r,sigma)
rand_stop = pmax(rand,-r)
-r
plot(rand_stop,type='l')
rand = rnorm(252,1+r,sigma)
rand_stop = pmax(rand,1-r)
plot(rand_stop)
prod(rand)
prod(rand_stop )
sequence(1)
rep(1,252)
no_stop_series = rep(1,252)
stop_series = rep(1,252)
no_stop_series = rep(1,253)
stop_series = rep(1,253)
stop_series(2)
stop_series[2]
source('~/.active-rstudio-document', echo=TRUE)
for (j in 2:253){
no_stop_series[j] = no_stop_series[j-1] * rand[j-1]
stop_series[j] = stop_series[j-1] * rand_stop[j-1]
}
plot(stop_series)
plot(stop_series,type='l')
line(no_stop_series,type='l',col='r')
line(no_stop_series,type='l',col='red')
lines(no_stop_series,type='l',col='red')
for (i in 1:times){
rand = rnorm(252,1+r,sigma)
rand_stop = pmax(rand,1-r)
no_stop = no_stop + prod(rnorm)/times
stop = stop + prod(rand_stop)/times
}
no_stop
stop
no_stop = 0
stop_loss = 0
for (i in 1:times){
rand = rnorm(252,1+r,sigma)
rand_stop = pmax(rand,1-r)
no_stop = no_stop + prod(rnorm)/times
stop_loss = stop_loss + prod(rand_stop)/times
}
no_stop
stop_loss
rand = rnorm(252,1+r,sigma)
rand_stop = pmax(rand,1-r)
no_stop = no_stop + prod(rnorm)/times
no_stop = 0
stop_loss = 0
for (i in 1:times){
rand = rnorm(252,1+r,sigma)
rand_stop = pmax(rand,1-r)
no_stop = no_stop + prod(rand)/times
stop_loss = stop_loss + prod(rand_stop)/times
}
no_stop
stop_loss
source('~/.active-rstudio-document', echo=TRUE)
install.packages("quantmod")
library(quantmod)
tail(SSEC)
tail(sse)
sse<-getSymbols("^SSEC",from = "2002-01-01",to = Sys.Date(),src = "yahoo")
tail(sse)
sse
library(quantmod)
head(SSEC)
tail(SSEC)
symbol
symbol <- "600001.SS"
getSymbols(symbol,from=start_date)
###Turtle Trading Detector
require(quantmod)
setwd("/Users/renco/GitHub/Renco_Quant_Trading")
stock_list <- load("All_list.RData")
stocks_code <- as.vector(as.matrix(get(stock_list))) #for looping to saving time
TCbreak_out <- rep(0,length.out=length(stocks_code)) #for vector
start_date <- "2016-01-20"
getSymbols(symbol,from=start_date)
get(symbol)
symbol <- "600004.SS"
get(symbol)
getSymbols(symbol,from=start_date)
macd <-MACD(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)))
ma5 <- SMA(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=100) #100 days simple moving average
ma10 <- SMA(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=10)
ma5 <- SMA(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=5) #100 days simple moving average
ma10 <- SMA(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=10)
Vma5 <- SMA(Vo(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=5) #100 days simple moving average
Vma10 <- SMA(Vo(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=10)
###Turtle Trading Detector
require(quantmod)
setwd("/Users/renco/GitHub/Renco_Quant_Trading")
stock_list <- load("All_list.RData")
stocks_code <- as.vector(as.matrix(get(stock_list))) #for looping to saving time
TCbreak_out <- rep(0,length.out=length(stocks_code)) #for vector
start_date <- "2016-01-20"
for(code in stocks_code){
#if(code %% 1000 ==0) {print (code)} #monitor progress
symbol <- "" ##Initiate
symbol <- paste(sprintf("%06d", code),
ifelse(code <= 1000, "SZ","SS"),
sep=".") #SZ stocks has number smaller than 1000
#getSymbols(symbol,from=start_date) #Fecthing data
tryCatch({getSymbols(symbol,from=start_date)
#atr <- lag(ATR(get(symbol)))
#ajusted for split and dividends
#get(symbol) <- adjustOHLC(get(symbol),use.Adjusted=TRUE)
macd <-MACD(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)))
ma5 <- SMA(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=5) #100 days simple moving average
ma10 <- SMA(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=10) #10 days simple moving average
Vma5 <- SMA(Vo(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=5) #100 days simple moving average
Vma10 <- SMA(Vo(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=10) #10 days simple moving average
if(last(macd)$macd > last(macd)$signal &
last(ma5) > last(ma10) &
last(Vma5) > last(Vma10) )
{TCbreak_out[which(stocks_code == code)] <- 1
} else {removeSymbols(symbol) #drop uninteresting data
}
},
warning=function(msg) {
print(paste("Caught warning message:", msg))
},
error=function(msg) {
print(paste("Caught fatal message:", msg))
return(NA)
}
) #tryCatch
} #for
##Delete data that doesn't matter
TCsignal <- data.frame(cbind(stocks_code,TCbreak_out))
TCsignal <- TCsignal[which(TCsignal["TCbreak_out"]==1),]
# save(potential,
#      file=paste(paste("potential",Sys.Date(),sep="_"),"RData",sep="."))
##vectorize the computation
##add code to memo stocks that no longer exist
TCsignal
###Turtle Trading Detector
require(quantmod)
setwd("/Users/renco/GitHub/Renco_Quant_Trading")
stock_list <- load("All_list.RData")
stocks_code <- as.vector(as.matrix(get(stock_list))) #for looping to saving time
TCbreak_out <- rep(0,length.out=length(stocks_code)) #for vector
start_date <- "2016-01-20"
for(code in stocks_code){
#if(code %% 1000 ==0) {print (code)} #monitor progress
symbol <- "" ##Initiate
symbol <- paste(sprintf("%06d", code),
ifelse(code <= 1000, "SZ","SS"),
sep=".") #SZ stocks has number smaller than 1000
#getSymbols(symbol,from=start_date) #Fecthing data
tryCatch({getSymbols(symbol,from=start_date)
#atr <- lag(ATR(get(symbol)))
#ajusted for split and dividends
#get(symbol) <- adjustOHLC(get(symbol),use.Adjusted=TRUE)
macd <-MACD(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)))
ma5 <- SMA(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=5) #100 days simple moving average
ma10 <- SMA(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=10) #10 days simple moving average
Vma5 <- SMA(Vo(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=5) #100 days simple moving average
Vma10 <- SMA(Vo(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=10) #10 days simple moving average
if(last(macd)$macd > last(macd)$signal &
last(lag(macd))$macd > last(lag(macd)) &
last(ma5) > last(ma10) &
last(lag(ma5)) > last(lag(ma10)) &
last(Vma5) > last(Vma10) &
last(lag(Vma5)) > last(lag(Vma10)))
{TCbreak_out[which(stocks_code == code)] <- 1
} else {removeSymbols(symbol) #drop uninteresting data
}
},
warning=function(msg) {
print(paste("Caught warning message:", msg))
},
error=function(msg) {
print(paste("Caught fatal message:", msg))
return(NA)
}
) #tryCatch
} #for
last(macd)$macd > last(macd)$signal &
last(lag(macd))$macd > last(lag(macd)) &
last(ma5) > last(ma10) &
last(lag(ma5)) > last(lag(ma10)) &
last(Vma5) > last(Vma10) &
last(lag(Vma5)) > last(lag(Vma10))
last(macd)$macd > last(macd)$signal &
last(lag(macd))$macd > last(lag(macd))$signal &
last(ma5) > last(ma10) &
last(lag(ma5)) > last(lag(ma10)) &
last(Vma5) > last(Vma10) &
last(lag(Vma5)) > last(lag(Vma10))
###Turtle Trading Detector
require(quantmod)
setwd("/Users/renco/GitHub/Renco_Quant_Trading")
stock_list <- load("All_list.RData")
stocks_code <- as.vector(as.matrix(get(stock_list))) #for looping to saving time
TCbreak_out <- rep(0,length.out=length(stocks_code)) #for vector
start_date <- "2016-01-20"
for(code in stocks_code){
#if(code %% 1000 ==0) {print (code)} #monitor progress
symbol <- "" ##Initiate
symbol <- paste(sprintf("%06d", code),
ifelse(code <= 1000, "SZ","SS"),
sep=".") #SZ stocks has number smaller than 1000
#getSymbols(symbol,from=start_date) #Fecthing data
tryCatch({getSymbols(symbol,from=start_date)
#atr <- lag(ATR(get(symbol)))
#ajusted for split and dividends
#get(symbol) <- adjustOHLC(get(symbol),use.Adjusted=TRUE)
macd <-MACD(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)))
ma5 <- SMA(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=5) #100 days simple moving average
ma10 <- SMA(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=10) #10 days simple moving average
Vma5 <- SMA(Vo(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=5) #100 days simple moving average
Vma10 <- SMA(Vo(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=10) #10 days simple moving average
if(last(macd)$macd > last(macd)$signal &
last(lag(macd))$macd > last(lag(macd))$signal &
last(ma5) > last(ma10) &
last(lag(ma5)) > last(lag(ma10)) &
last(Vma5) > last(Vma10) &
last(lag(Vma5)) > last(lag(Vma10)))
{TCbreak_out[which(stocks_code == code)] <- 1
} else {removeSymbols(symbol) #drop uninteresting data
}
},
warning=function(msg) {
print(paste("Caught warning message:", msg))
},
error=function(msg) {
print(paste("Caught fatal message:", msg))
return(NA)
}
) #tryCatch
} #for
##Delete data that doesn't matter
TCsignal <- data.frame(cbind(stocks_code,TCbreak_out))
TCsignal <- TCsignal[which(TCsignal["TCbreak_out"]==1),]
# save(potential,
#      file=paste(paste("potential",Sys.Date(),sep="_"),"RData",sep="."))
##vectorize the computation
##add code to memo stocks that no longer exist
TCsignal
###Turtle Trading Detector
require(quantmod)
setwd("/Users/renco/GitHub/Renco_Quant_Trading")
stock_list <- load("All_list.RData")
stocks_code <- as.vector(as.matrix(get(stock_list))) #for looping to saving time
TCbreak_out <- rep(0,length.out=length(stocks_code)) #for vector
start_date <- "2016-01-20"
for(code in stocks_code){
#if(code %% 1000 ==0) {print (code)} #monitor progress
symbol <- "" ##Initiate
symbol <- paste(sprintf("%06d", code),
ifelse(code <= 1000, "SZ","SS"),
sep=".") #SZ stocks has number smaller than 1000
#getSymbols(symbol,from=start_date) #Fecthing data
tryCatch({getSymbols(symbol,from=start_date)
#atr <- lag(ATR(get(symbol)))
#ajusted for split and dividends
#get(symbol) <- adjustOHLC(get(symbol),use.Adjusted=TRUE)
macd <-MACD(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)))
ma5 <- SMA(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=5) #100 days simple moving average
ma10 <- SMA(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=10) #10 days simple moving average
Vma5 <- SMA(Vo(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=5) #100 days simple moving average
Vma10 <- SMA(Vo(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=10) #10 days simple moving average
if(last(macd)$macd > last(macd)$signal &
last(lag(macd))$macd < last(lag(macd))$signal &
last(ma5) > last(ma10) &
last(lag(ma5)) < last(lag(ma10)) &
last(Vma5) > last(Vma10) &
last(lag(Vma5)) < last(lag(Vma10)))
{TCbreak_out[which(stocks_code == code)] <- 1
} else {removeSymbols(symbol) #drop uninteresting data
}
},
warning=function(msg) {
print(paste("Caught warning message:", msg))
},
error=function(msg) {
print(paste("Caught fatal message:", msg))
return(NA)
}
) #tryCatch
} #for
##Delete data that doesn't matter
TCsignal <- data.frame(cbind(stocks_code,TCbreak_out))
TCsignal <- TCsignal[which(TCsignal["TCbreak_out"]==1),]
# save(potential,
#      file=paste(paste("potential",Sys.Date(),sep="_"),"RData",sep="."))
##vectorize the computation
##add code to memo stocks that no longer exist
TCsignal
###Turtle Trading Detector
require(quantmod)
setwd("/Users/renco/GitHub/Renco_Quant_Trading")
stock_list <- load("All_list.RData")
stocks_code <- as.vector(as.matrix(get(stock_list))) #for looping to saving time
TCbreak_out <- rep(0,length.out=length(stocks_code)) #for vector
start_date <- "2016-01-20"
end_date <- "2016-04-19"
for(code in stocks_code){
#if(code %% 1000 ==0) {print (code)} #monitor progress
symbol <- "" ##Initiate
symbol <- paste(sprintf("%06d", code),
ifelse(code <= 1000, "SZ","SS"),
sep=".") #SZ stocks has number smaller than 1000
#getSymbols(symbol,from=start_date) #Fecthing data
tryCatch({getSymbols(symbol,from=start_date,to=end_date)
#atr <- lag(ATR(get(symbol)))
#ajusted for split and dividends
#get(symbol) <- adjustOHLC(get(symbol),use.Adjusted=TRUE)
macd <-MACD(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)))
ma5 <- SMA(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=5) #100 days simple moving average
ma10 <- SMA(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=10) #10 days simple moving average
Vma5 <- SMA(Vo(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=5) #100 days simple moving average
Vma10 <- SMA(Vo(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=10) #10 days simple moving average
if(last(macd)$macd > last(macd)$signal &
last(lag(macd))$macd < last(lag(macd))$signal &
last(ma5) > last(ma10) &
last(lag(ma5)) < last(lag(ma10)) &
last(Vma5) > last(Vma10) &
last(lag(Vma5)) < last(lag(Vma10)))
{TCbreak_out[which(stocks_code == code)] <- 1
} else {removeSymbols(symbol) #drop uninteresting data
}
},
warning=function(msg) {
print(paste("Caught warning message:", msg))
},
error=function(msg) {
print(paste("Caught fatal message:", msg))
return(NA)
}
) #tryCatch
} #for
##Delete data that doesn't matter
TCsignal <- data.frame(cbind(stocks_code,TCbreak_out))
TCsignal <- TCsignal[which(TCsignal["TCbreak_out"]==1),]
# save(potential,
#      file=paste(paste("potential",Sys.Date(),sep="_"),"RData",sep="."))
##vectorize the computation
##add code to memo stocks that no longer exist
TCsignal
