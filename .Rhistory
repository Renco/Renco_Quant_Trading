## 2011-12-22 2.770586 119.60 383.07 138.70795 -0.002322110
## 2011-12-23 3.094533 120.67 387.66  53.33343  0.003311904
## 2011-12-27 3.450416 120.76 390.74  17.04417  0.007083611
## 2011-12-28 3.364819 119.18 387.00 -24.22055  0.004194527
## 2011-12-29 3.004804 120.41 389.38 -15.77781 -0.003361064
threshold <- sd(data$spread, na.rm = TRUE)
threshold
## [1] 143.7734
plot(data$spread, main = "AAPL vs. SPY In-Sample",
cex.main = 0.8,
cex.lab = 0.8,
cex.axis = 0.8)
abline(h = threshold, lty = 2)
abline(h = -threshold, lty = 2)
# Construct the out of sample spread
# Keep the same 10 day rolling window
window_length <- 10
# Time range
start_date <- "2012-01-01"
end_date <- "2013-12-31"
range <- paste(start_date, "::",
end_date, sep = "")
# Our stock pair
x <- SPY[range, 6]
y <- AAPL[range, 6]
# Bind these together into a matrix
dF <- cbind(x, y)
names(dF) <- c("x", "y")
# Calculate the out of sample rolling beta
beta_out_of_sample <- rolling_beta(diff(dF), 10)
# Buy and sell threshold
data_out <- merge(beta_out_of_sample, dF)
data_out$spread <- data_out$y -
lag(beta_out_of_sample, 1) * data_out$x
# Plot the spread with in-sample bands
plot(data_out$spread, main = "AAPL vs. SPY out of sample",
cex.main = 0.8,
cex.lab = 0.8,
cex.axis = 0.8)
abline(h = threshold, lwd = 2)
abline(h = -threshold, lwd = 2)
# Generate sell and buy signals
buys <- ifelse(data_out$spread > threshold, 1, 0)
sells <- ifelse(data_out$spread < -threshold, -1, 0)
data_out$signal <- buys + sells
plot(data_out$spread, main = "AAPL vs. SPY out of sample",
cex.main = 0.8,
cex.lab = 0.8,
cex.axis = 0.8)
abline(h = threshold, lty = 2)
abline(h = -threshold, lty = 2)
point_type <- rep(NA, nrow(data_out))
buy_index <- which(data_out$signal == 1)
sell_index <- which(data_out$signal == -1)
point_type[buy_index] <- 21
point_type[sell_index] <- 24
points(data_out$spread, pch = point_type)
num_of_buy_signals <- sum(buys, na.rm = TRUE)
num_of_sell_signals <- sum(abs(sells), na.rm = TRUE)
num_of_buy_signals
## [1] 303
num_of_sell_signals
## [1] 189
prev_x_qty <- 0
position <- 0
trade_size <- 100
signal <- as.numeric(data_out$signal)
signal[is.na(signal)] <- 0
beta <- as.numeric(data_out$beta_out_of_sample)
qty_x <- rep(0, length(signal))
qty_y <- rep(0, length(signal))
signal
prev_x_qty <- 0
position <- 0
trade_size <- 100
signal <- as.numeric(data_out$signal)
signal[is.na(signal)] <- 0
beta <- as.numeric(data_out$beta_out_of_sample)
qty_x <- rep(0, length(signal))
qty_y <- rep(0, length(signal))
for(i in 1:length(signal)) {
if(signal[i] == 1 && position == 0) {
# buy the spread
prev_x_qty <- round(beta[i] * trade_size)
qty_x[i] <- -prev_x_qty
qty_y[i] <- trade_size
position <- 1
}
if(signal[i] == -1 && position == 0) {
# sell the spread initially
prev_x_qty <- round(beta[i] * trade_size)
qty_x[i] <- prev_x_qty
qty_y[i] <- -trade_size
position <- -1
}
if(signal[i] == 1 && position == -1) {
# we are short the spread and need to buy
qty_x[i] <- -(round(beta[i] * trade_size) +
prev_x_qty)
prev_x_qty <- round(beta[i] * trade_size)
qty_y[i] <- 2 * trade_size
position <- 1
}
if(signal[i] == -1 && position == 1) {
# we are long the spread and need to sell
qty_x[i] <- round(beta[i] * trade_size) + prev_x_qty
prev_x_qty <- round(beta[i] * trade_size)
qty_y[i] <- -2 * trade_size
position <- -1
}
}
qty_x[length(qty_x)] <- -sum(qty_x)
qty_y[length(qty_y)] <- -sum(qty_y)
data_out$qty_x <- qty_x
data_out$qty_y <- qty_y
data_out[1:3, ]
##  beta_out_of_sample        x      y  spread signal qty_x qty_y
## 2012-01-17  2.1511279 123.48 408.20     NA     NA    0     0
## 2012-01-18  2.5890817 124.85 412.44  143.87168  1 -259   100
## 2012-01-19  2.0711505 125.51 411.13   86.17435  0    0     0
tail(data_out, 3)
##   beta_out_of_sample       x      y  spread signal qty_x qty_y
## 2012-12-27  6.505
# function for computing the equity curve
compute_equity_curve <- function(qty, price) {
cash_buy <- ifelse(sign(qty) == 1,
qty * price, 0)
cash_sell <- ifelse(sign(qty) == -1,
-qty * price, 0)
position <- cumsum(qty)
cumulative_buy <- cumsum(cash_buy)
cumulative_sell <- cumsum(cash_sell)
equity <- cumulative_sell - cumulative_buy +
position * price
return(equity)
}
# Add the equity curve columns to the data_out table
data_out$equity_curve_x <- compute_equity_curve(
data_out$qty_x, data_out$x)
data_out$equity_curve_y <- compute_equity_curve(
data_out$qty_y, data_out$y)
plot(data_out$equity_curve_x +
data_out$equity_curve_y, type = 'l',
main = "AAPL / SPY spread", ylab = "P&L",
cex.main = 0.8,
cex.axis = 0.8,
cex.lab = 0.8)
sharpe_ratio <- function(x, rf) {
sharpe <- (mean(x, na.rm = TRUE) - rf) /
sd(x, na.rm = TRUE)
return(sharpe)
}
# Calculates the maximum drawdown profile
drawdown <- function(x) {
cummax(x) - x
}
par(mfrow = c(2, 1))
equity_curve <- data_out$equity_curve_x + data_out$equity_curve_y
plot(equity_curve, main = "Equity Curve",
cex.main = 0.8,
cex.lab = 0.8,
cex.axis = 0.8)
plot(drawdown(equity_curve), main = "Drawdown of equity curve",
cex.main = 0.8,
cex.lab = 0.8,
cex.axis = 0.8)
equity <- as.numeric(equity_curve[, 1])
equity_curve_returns <- diff(equity) / equity[-length(equity)]
# Remove any infinities and NaN
invalid_values <- is.infinite(equity_curve_returns)
| is.nan(equity_curve_returns)
invalid_values <- is.infinite(equity_curve_returns)  | is.nan(equity_curve_returns)
sharpe_ratio(equity_curve_returns[!invalid_values], 0.03)
[1] 0.0658528
omega_ratio <- function(r, T) {
omega <- mean(pmax(r - T, 0)) / mean(pmax(T - r, 0))
return(omega)
}
#######################
# Strategy attributes #
#######################
# Find out where the trades occur
trade_dates <- data_out$qty_x[data_out$qty_x != 0]
# The trade_dates object is an xts object whose index
# contains the necessary time information
duration <- as.numeric(diff(index(trade_dates)))
# Summary statistics
summary(duration)
## Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
## 1.00   13.50   21.00   31.84   44.00  128.00
# Histogram of trade duration
hist(duration, breaks = 20,
main = "Histogram of trade durations",
cex.main = 0.8,
cex.lab = 0.8,
cex.axis = 0.8)
#######################
# Strategy attributes #
#######################
# Find out where the trades occur
trade_dates <- data_out$qty_x[data_out$qty_x != 0]
# The trade_dates object is an xts object whose index
# contains the necessary time information
duration <- as.numeric(diff(index(trade_dates)))
# Summary statistics
summary(duration)
## Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
## 1.00   13.50   21.00   31.84   44.00  128.00
# Histogram of trade duration
hist(duration, breaks = 20,
main = "Histogram of trade durations",
cex.main = 0.8,
cex.lab = 0.8,
cex.axis = 0.8)
?index
require(quantmod)
?index
trade_dates <- data_out$qty_x[data_out$qty_x != 0]
# The trade_dates object is an xts object whose index
# contains the necessary time information
duration <- as.numeric(diff(index(trade_dates)))
# Summary statistics
summary(duration)
## Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
## 1.00   13.50   21.00   31.84   44.00  128.00
# Histogram of trade duration
hist(duration, breaks = 20,
main = "Histogram of trade durations",
cex.main = 0.8,
cex.lab = 0.8,
cex.axis = 0.8)
63456 + 18279.82
63456 + 18279.82 - 81773.28
63456 + 18279.82 - 81773.28 + 99361
23.27 * 1.07
18886 + 66522
21 + 14 + 10 + 9 + 7 + 6 + 12 + 7
8 + 5 + 10 + 7 + 6 + 9 + 3 + 23 + 8 + 6
5 + 2 + 3 + 6 + 3 + 4 + 2 + 6 + 4 + 2
86 + 85 + 74
26.49 * 1.04
26.49 * 1.07
cd ~
]
#Book Keeping
###Consumption
con <- data.frame()
names(con) <- c("金额"，"用途"，"分类",
"消费方式"，"日期")
con
#Book Keeping
###Consumption
con <- data.frame()
names(con) <- c("Date","Amount"，"Descrption"，"Category",
"Method")
names(con) <- c("金额"，"用途"，"分类",
"消费方式"，"日期")
#Book Keeping
###Consumption
con <- data.frame()
names(con) <- c("金额","用途","分类",
"消费方式","日期")
names(con) <- c("1","2","3")
names(con) <- c("1","2")
names(con)
con_data <- c(87.32,"电费","杂费","信用卡".
20160825)
con_data <- c(87.32,"电费","杂费","信用卡",
20160825)
con <- data.frame(con_data)
con
?"data.frame"
con <- data.frame(87.32,"电费","杂费","信用卡",
20160825)
con
con <- data.frame(20160825,
87.32,"电费","杂费","信用卡")
names(con) <- c("日期","金额","用途","分类",
"消费方式")
con
View(con)
View(con)
save.image("~/GitHub/BookKeeping.RData")
?rbind
class(con)
summary(con)
inc <- data.frame(as.Date(20160825),478.84,"学校工资")
names(inc) <- c("日期","金额","来源")
?as.Date
Date(20160825)
Sys.Date()
as.Date(20160825,"%Y%b%d")
as.Date(20160825,"%Y%m%d")
x <- c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z <- as.Date(x, "%d%b%Y")
z
as.Date(20160825,"%Y%m%d")
as.Date(2016-08-25,"%Y-%m-%d")
as.Date(20160825,"yyyymmdd")
as.Date("20160825","yyyymmdd")
as.Date("20160825","%Y%m%d")
#Book Keeping
###Consumption
#first record
con <- data.frame(as.Date("20160825","%Y%m%d"),
87.32,"电费","杂费","信用卡")
names(con) <- c("日期","金额","用途","分类",
"消费方式")
#function to insert record
#new_con <- list()
###Income
inc <- data.frame(as.Date("20160825","%Y%m%d"),
478.84,"学校工资")
names(inc) <- c("日期","金额","来源")
con
inc
ass <- data.frame("BOA2221",6502.43)
names(ass) <- c("名称","金额")
ass
ass <- rbind(ass,list("BOA7529",403.37))
list("BOA7529",403.37)
ass <- rbind(ass,c("BOA7529",403.37))
c("BOA7529",403.37)
?rbind
list("BOA7529",403.37)
renco <- list("BOA7529",403.37)
ass <- rbind(ass,renco)
ass <- data.frame("BOA2221",6502.43,
stringsAsFactors = F)
names(ass) <- c("名称","金额")
renco <- list("BOA7529",403.37)
ass <- rbind(ass,renco)
ass
ass <- rbind(ass,list("BOA7529",-300.82))
ass
TotalAssets= sum(ass$金额)
TotalAssets
print(paste("总资产：",as.character(TotalAssets)))
?subset
Sys.Date()
subset(con, 日期 == Sys.Date() )
con <- data.frame(as.Date("20160826","%Y%m%d"),
87.32,"电费","杂费","信用卡")
names(con) <- c("日期","金额","用途","分类",
"消费方式")
ConToday <- sum(subset(con, 日期 == Sys.Date() ))
subset(con, 日期 == Sys.Date() )
ConToday <- sum(subset(con, 日期 == Sys.Date(),
select = 金额))
ConToday
#Book Keeping
###Consumption
#first record
con <- data.frame(as.Date("20160826","%Y%m%d"),
87.32,"电费","杂费","信用卡")
names(con) <- c("日期","金额","用途","分类",
"消费方式")
#function to insert record
#new_con <- list()
###Income
inc <- data.frame(as.Date("20160826","%Y%m%d"),
478.84,"学校工资")
names(inc) <- c("日期","金额","来源")
##Assets
ass <- data.frame("BOA2221",6502.43,
stringsAsFactors = F)
names(ass) <- c("名称","金额")
#ass <- rbind(ass,list("BOA7529",403.37))
ass <- rbind(ass,list("BOA7529",-300.82))
##Summary
TotalAssets= sum(ass$金额)
ConToday <- sum(subset(con, 日期 == Sys.Date(),
select = 金额))
IncToday <- sum(subset(inc, 日期 == Sys.Date(),
select = 金额))
print(paste("今日消费: ",as.character(ConToday)))
print(paste("今日收入: ",as.character(IncToday)))
print(paste("总资产：",as.character(TotalAssets)))
##Summary
Book.summary <- list(paste("今日消费: ",as.character(ConToday)),
paste("今日消费: ",as.character(ConToday)))
print(Book.summary)
#Book Keeping
###Consumption
#first record
con <- data.frame(as.Date("20160826","%Y%m%d"),
87.32,"电费","杂费","信用卡")
names(con) <- c("日期","金额","用途","分类",
"消费方式")
#function to insert record
#new_con <- list()
###Income
inc <- data.frame(as.Date("20160826","%Y%m%d"),
478.84,"学校工资")
names(inc) <- c("日期","金额","来源")
##Assets
ass <- data.frame("BOA2221",6502.43,
stringsAsFactors = F)
names(ass) <- c("名称","金额")
#ass <- rbind(ass,list("BOA7529",403.37))
ass <- rbind(ass,list("BOA7529",-300.82))
##Summary
TotalAssets= sum(ass$金额)
ConToday <- sum(subset(con, 日期 == Sys.Date(),
select = 金额))
IncToday <- sum(subset(inc, 日期 == Sys.Date(),
select = 金额))
print(paste("今日消费: ",as.character(ConToday)))
print(paste("今日收入: ",as.character(IncToday)))
print(paste("总资产：",as.character(TotalAssets)))
###Turtle Trading Detector
require(quantmod)
setwd("/Users/renco/GitHub/Renco_Quant_Trading")
stock_list <- load("All_list.RData")
stocks_code <- as.vector(as.matrix(get(stock_list))) #for looping to saving time
break_out <- rep(0,length.out=length(stocks_code)) #for vector
# break_out <- rep(0,length.out=dim(stocks_code)[1]) #for data.frame
start_date <- "2016-03-20"
end_date <- "2016-09-18"
for(code in stocks_code){
#if(code %% 1000 ==0) {print (code)} #monitor progress
symbol <- "" ##Initiate
symbol <- paste(sprintf("%06d", code),
ifelse(code <= 1000, "SZ","SS"),
sep=".") #SZ stocks has number smaller than 1000
#getSymbols(symbol,from=start_date) #Fecthing data
tryCatch({getSymbols(symbol,from=start_date,to = end_date)
#atr <- lag(ATR(get(symbol)))
#ajusted for split and dividends
#get(symbol) <- adjustOHLC(get(symbol),use.Adjusted=TRUE)
dc <- lag(DonchianChannel(cbind(Hi(adjustOHLC(get(symbol),use.Adjusted=TRUE)),
Lo(adjustOHLC(get(symbol),use.Adjusted=TRUE)))),
n=20)
if(last(Cl(last(adjustOHLC(get(symbol),use.Adjusted=TRUE)))) > last(dc)$high)
#if(last(Cl(last(adjustOHLC(get(symbol),use.Adjusted=TRUE)))) < last(dc)$low)
{break_out[which(stocks_code == code)] <- 1
} else {removeSymbols(symbol) #drop uninteresting data
}
},
warning=function(msg) {
print(paste("Caught warning message:", msg))
},
error=function(msg) {
print(paste("Caught fatal message:", msg))
return(NA)
}
) #tryCatch
} #for
##Delete data that doesn't matter
potential <- data.frame(cbind(stocks_code,break_out))
##Get all the tickers of stocks that have Donchian Break_Out
potential <- potential[which(potential["break_out"]==1),]
####Add code to save potential
# save(potential,
#      file=paste(paste("potential",Sys.Date(),sep="_"),"RData",sep="."))
##vectorize the computation
##add code to memo stocks that no longer exist
####################################################################
##MA break-out to filter out false Turtle break out
require(quantmod)
#load(paste("potential",Sys.Date(),sep="_"))
#use potential from Turtle
load(paste(paste("potential",Sys.Date(),sep="_"),"RData",sep="."))
potential <- as.vector(as.matrix(potential[,1]))
double_break_out <- rep(0,length.out=length(potential))
order_size <- rep(0,length.out=length(potential))
last_price <- rep(0,length.out=length(potential))
range_size <- rep(0,length.out=length(potential)) #atr
stop_loss <- rep(0,length.out=length(potential))
scale_up <- rep(0,length.out=length(potential)) #price to add
scale_up2 <- rep(0,length.out=length(potential))
start_date <- "2015-09-01"
for(code in potential){
symbol <- "" ##Initiate
symbol <- paste(sprintf("%06d", code),
ifelse(code <= 1000, "SZ","SS"),
sep=".")
tryCatch({ getSymbols(symbol,from=start_date,to=end_date)
ma100 <- SMA(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=100) #100 days simple moving average
ma10 <- SMA(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)),n=10) #10 days simple moving average
if(last(ma10) > last(ma100))
{double_break_out[which(potential == code)] <- 1
order_size[which(potential == code)] <- 500/last(ATR(HLC(get(symbol)))$atr)
range_size[which(potential == code)] <- last(ATR(HLC(get(symbol)))$atr)
last_price[which(potential == code)] <- last(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE)))
stop_loss[which(potential == code)] <- last(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE))) - range_size[which(potential == code)]
scale_up[which(potential == code)] <- last(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE))) + 0.5 * range_size[which(potential == code)]
scale_up2[which(potential == code)] <- last(Cl(adjustOHLC(get(symbol),use.Adjusted=TRUE))) + range_size[which(potential == code)]
}
},
warning=function(msg) {
print(paste("Caught warning message:", msg))
},
error=function(msg) {
print(paste("Caught fatal message:", msg))
return(NA)
}
) #tryCatch
} #for
##Delete data that doesn't matter
high_prob <- data.frame(cbind(potential,double_break_out
,order_size,last_price,range_size,
stop_loss,scale_up,scale_up2))
##Get all the tickers of stocks that have Double Break_Out
high_prob <- high_prob[which(high_prob["double_break_out"]==1),]
#drop the double break out column
high_prob <-high_prob[-2]
# save(high_prob,
#      file=paste(paste("high_prob",Sys.Date(),sep="_"),"RData",sep="."))
#
####################################################################
as.vector(high_prob[,1])
